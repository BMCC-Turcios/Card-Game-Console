<diagram program="umletino" version="14.3.0"><zoom_level>10</zoom_level><help_text>Space for diagram notes</help_text><element><id>UMLClass</id><coordinates><x>1379</x><y>255</y><w>210</w><h>190</h></coordinates><panel_attributes>Card
--
-rank: Rank
-suit: Suit
--
+Selected: Bool {Get; Set;}
+Rank: Rank{get;}
+Suit: Suit{get;}
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>1379</x><y>5</y><w>210</w><h>190</h></coordinates><panel_attributes>Deck
--
-card: list&lt;Card&gt;
--
+Deck()
+Shuffle
+TakeTopCard(): Card</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>1059</x><y>5</y><w>280</w><h>310</h></coordinates><panel_attributes>/&lt;&lt;Abstract&gt;&gt;/
/Board/
--
-deck: Deck
#cardsOnBoard: List&lt;Card&gt;
#selectedCardsOnBoard: List&lt;Card&gt;
+MaxCard: int { get; private set&gt;
--
+Board:(int sizeBoard)
+SelectCard(userInput: String): Void
+Remove(): Void
+Replace(): Void
+CardAddUp(SumValue: int): bool
+CheckForWin(): Bool
+PrintBoard(): Void
--
Remove method will remove all 
Cards that is selected if condition are met
Replace method will add cards that are empty
up to the size of board</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>549</x><y>5</y><w>480</w><h>500</h></coordinates><panel_attributes>/&lt;&lt;Abstract&gt;&gt;/
/Game/
--
+TEN: const int
+ELEVEN: const int
+THIRTEEN: const int
+leaderboard: Dictionary&lt;string, int&gt;
+PlayerName: string &lt;get, private set&gt;
+HasSurrendered: bool &lt;get&gt;
--
&lt;&lt;Constructor&gt;&gt;
_+Create(int typeOfGame): Game_
#Game(int sizeOfGame): base(sizeOfGame)
--
&lt;&lt;Public&gt;&gt;
+IsStillPlaying(int time): bool
+ChangeName(): void 
+AddToLeaderboard(): void
--
/&lt;&lt;Abstract&gt;&gt;/
/+TypeOfGame: string {get;}/
/+ConditonToRemove(): bool/
--
Abstract properties and methods will need to be inherited in subClasses.

Create method will have a switch statement
that will create new Game type object
example: 
Game game = Game.Create(Game.TEN)
translation:
Game game = new Ten();

Game will create a default player name and
player will be able to change the name 
at any point of the game or when they win.

</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>439</x><y>545</y><w>210</w><h>190</h></coordinates><panel_attributes>Ten
--
+Ten(): base(Game.TEN)
+TypeOfGame: string {get;}
+ConditonToRemove(): bool
--
-CheckKQJT(): Bool
-CheckForRank(): Bool
--
Chances of winning are 
claimed to be 1 out of ten</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>679</x><y>545</y><w>210</w><h>190</h></coordinates><panel_attributes>Eleven
--
+Eleven(): base(Game.ELEVEN)
+TypeOfGame: string {get;}
+ConditonToRemove(): bool
--
-CheckKQJ(): int
--
</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>919</x><y>545</y><w>210</w><h>190</h></coordinates><panel_attributes>Thirteen
--
+Thirteen(): base(Game.THIRTEEN)
+TypeOfGame: string {get;}
+ConditonToRemove(): bool
--
-CheckKing():Bool
--
Chances of winning are 
Claimed to be about 1 in 8 games</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLInterface</id><coordinates><x>1409</x><y>479</y><w>140</w><h>100</h></coordinates><panel_attributes>IEquatable&lt;Card&gt;
--
+Equal(other:  Card)
</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>1469</x><y>429</y><w>30</w><h>80</h></coordinates><panel_attributes>lt=&lt;&lt;.</panel_attributes><additional_attributes>10;10;10;60</additional_attributes></element><element><id>UMLClass</id><coordinates><x>279</x><y>0</y><w>100</w><h>30</h></coordinates><panel_attributes>ElevenScore.txt</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>389</x><y>0</y><w>100</w><h>30</h></coordinates><panel_attributes>ThirteenScore.txt</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>169</x><y>0</y><w>100</w><h>30</h></coordinates><panel_attributes>TenScore.txt</panel_attributes><additional_attributes></additional_attributes></element><element><id>UMLClass</id><coordinates><x>139</x><y>120</y><w>350</w><h>180</h></coordinates><panel_attributes>IOScore
--
-FileName: string
-MAX_SCORE_WRITE: const int

--
+IOScore(type: gameType): constructor
+SaveLeaderBoard(newLeaderboard: &lt;string, int&gt;): void
+GetLeaderBoard(): &lt;string, int&gt;



</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>319</x><y>20</y><w>30</w><h>120</h></coordinates><panel_attributes>lt=&lt;-&gt;</panel_attributes><additional_attributes>10;10;10;100</additional_attributes></element><element><id>Relation</id><coordinates><x>419</x><y>20</y><w>30</w><h>120</h></coordinates><panel_attributes>lt=&lt;-&gt;</panel_attributes><additional_attributes>10;10;10;100</additional_attributes></element><element><id>Relation</id><coordinates><x>209</x><y>20</y><w>30</w><h>120</h></coordinates><panel_attributes>lt=&lt;-&gt;</panel_attributes><additional_attributes>10;10;10;100</additional_attributes></element><element><id>Relation</id><coordinates><x>1489</x><y>188</y><w>30</w><h>90</h></coordinates><panel_attributes>lt=&lt;-</panel_attributes><additional_attributes>10;10;10;70</additional_attributes></element><element><id>Relation</id><coordinates><x>1329</x><y>18</y><w>70</w><h>30</h></coordinates><panel_attributes>lt=&lt;-</panel_attributes><additional_attributes>10;10;50;10</additional_attributes></element><element><id>Relation</id><coordinates><x>1019</x><y>478</y><w>30</w><h>90</h></coordinates><panel_attributes>lt=&lt;.
</panel_attributes><additional_attributes>10;70;10;10</additional_attributes></element><element><id>Relation</id><coordinates><x>769</x><y>498</y><w>30</w><h>70</h></coordinates><panel_attributes>lt=&lt;.
</panel_attributes><additional_attributes>10;50;10;10</additional_attributes></element><element><id>Relation</id><coordinates><x>539</x><y>498</y><w>30</w><h>70</h></coordinates><panel_attributes>lt=&lt;.
</panel_attributes><additional_attributes>10;50;10;10</additional_attributes></element><element><id>Relation</id><coordinates><x>479</x><y>258</y><w>90</w><h>40</h></coordinates><panel_attributes>lt=&lt;-
</panel_attributes><additional_attributes>10;20;70;20</additional_attributes></element><element><id>Relation</id><coordinates><x>1019</x><y>8</y><w>60</w><h>30</h></coordinates><panel_attributes>lt=&lt;.</panel_attributes><additional_attributes>10;10;40;10</additional_attributes></element><element><id>UMLClass</id><coordinates><x>89</x><y>318</y><w>320</w><h>370</h></coordinates><panel_attributes>Command
--
+SELECT:const string 
+REMOVE:const string 
+REPLACE:const string 
+FORFIET:const string 
+HIGHSCORE:const string 
+CHANGENAME:const string 
+SHOWCOMMANDS:const string 

-Token:string { get; set; }
-CommandLine: string[]  { get; set; }

--
+ExecuteCommand(gameObj: Game) void
--
-ShowCommands(): void
-MakeListOfCards(array_cards:string[]):List&lt;Card&gt; 
-MakeCard(str_card:string):Card 
-IsStringAValidCard(str_card: string): bool
-GetSuit(suit: char): Suit
-GetRank(rank: char): Rank
</panel_attributes><additional_attributes></additional_attributes></element><element><id>Relation</id><coordinates><x>399</x><y>388</y><w>170</w><h>40</h></coordinates><panel_attributes>lt=&lt;-
</panel_attributes><additional_attributes>10;20;150;20</additional_attributes></element></diagram>